/*
 * Copyright (C) 2007 by
 * 
 * 	Xuan-Hieu Phan
 *	hieuxuan@ecei.tohoku.ac.jp or pxhieu@gmail.com
 * 	Graduate School of Information Sciences
 * 	Tohoku University
 * 
 *  Cam-Tu Nguyen
 *  ncamtu@gmail.com
 *  College of Technology
 *  Vietnam National University, Hanoi
 *
 * JGibbsLDA is a free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * JGibbsLDA is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JGibbsLDA; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 */

package jgibblda;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.kohsuke.args4j.*;

import services.SopWordService;

public class LDA {
	
	public static void main(String args[]) throws FileNotFoundException{
	/*	LDACmdOption option = new LDACmdOption();

		FileOutputStream x = SopWordService.getSingleton().remove("/home/iness/Downloads/stop.txt", "/home/iness/Downloads/removedstopwords.txt");
		
		option.est= true;
		option.dir ="/home/iness/Downloads/";
		option.dfile = "testa.txt";
		option.modelName = "test-LDA";*/
		String commentstr = "great #gender initiative supported @canada ���� @unwomen reduce #inequality #sdgs! http://.co/qkhdgdqwxp ";
		 String urlPattern = "((https?|ftp|gopher|telnet|file|Unsure|http):((//)|(\\\\))+[\\w\\d:#@%/;$()~_?\\+-=\\\\\\.&]*)";
	        Pattern p = Pattern.compile(urlPattern,Pattern.CASE_INSENSITIVE);
	        Matcher m = p.matcher(commentstr);
	        String sentence = "A man, a plan, a canal — Panama!";
	        String[] parts = commentstr.split("(?<!^)\\b");
	        String newSentence;
	        newSentence ="";
	        try{
	        	File ff=new File("/home/iness/dossier.txt"); // définir l'arborescence
	        	ff.createNewFile();
	        	FileWriter ffw=new FileWriter(ff);
	        	  // écrire une ligne dans le fichier resultat.txt
	        	
	        	
	        for (String part : parts){
	        	
	        	if(part.matches("\\w+") == true){
	        		newSentence += part+" ";
	        		System.out.println( "new sentence"+newSentence);
	        		
	        	}
	        	ffw.write(newSentence);
	        	ffw.write("\n"); // forcer le passage à la ligne
	        	ffw.close(); // fermer le fichier à la fin des traitements
	        }} catch (Exception e) {}
	        int k = 0;
	        while (m.find()) {
	            commentstr = commentstr.replaceAll(m.group(k),"").trim();
	            k++;
	        }
	        System.out.println( "comment"+commentstr);
	        
	        
	}}
	/*        
		try {
			
			
			if (option.est || option.estc){
				Estimator estimator = new Estimator();
				estimator.init(option);
				estimator.estimate();
			}
			else if (option.inf){
				Inferencer inferencer = new Inferencer();
				inferencer.init(option);
				
				Model newModel = inferencer.inference();
			
				for (int i = 0; i < newModel.phi.length; ++i){
					//phi: K * V
					System.out.println("-----------------------\ntopic" + i  + " : ");
					for (int j = 0; j < 10; ++j){
						System.out.println(inferencer.globalDict.id2word.get(j) + "\t" + newModel.phi[i][j]);
					}
				}
			}
		}
		catch (Exception e){
			System.out.println("Error in main: " + e.getMessage());
			e.printStackTrace();
			return;
		}
	}
	
	public static void showHelp(CmdLineParser parser){
		System.out.println("LDA [options ...] [arguments...]");
		parser.printUsage(System.out);
	}
	
}*/
